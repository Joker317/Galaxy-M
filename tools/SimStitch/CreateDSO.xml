<tool id="createdso" name="Create DSO object">
  	<description>Step 6 of SimStitch. Puts merged replicate spectra into PLS Toolbox DSO object.</description>
  	
	
	<command>
matlab -r "cd('../../../../tools/SimStitch'); CreateDSO('${fileList}', '${peakmatrix}', '${pmatrix_row}', '${pmatrix_col}', '${output}'); exit;"
  	</command>


	<inputs>
		<param format="xml" name="fileList" type="data" label="List tof files (.xml) produced by File List manager" />
		<param format="txt" name="peakmatrix" type="data" label="PeakMatrix (.csv)" />
		<param format="txt" name="pmatrix_row" type="data" label="Row Labels (.csv)" />
		<param format="txt" name="pmatrix_col" type="data" label="Column Labels (.csv)" />
	</inputs>


  	<outputs>
    		<data format="xml" name="output" label ="Create DSO object on $fileList.hid , $peakmatrix.hid, $pmatrix_row.hid, $pmatrix_col.hid: DSO (.xml)" />
  	</outputs>


  <help>
This tool takes output from SimStitch and prepares it for multivariate analysis by converting the various text files into a PLS Toolbox 'dataset' object. See Eigenvector Research's website for more details regarding the PLS Toolbox extension for Matlab http://www.eigenvector.com/software/pls_toolbox.htm

It combines the basic x-matrix, row and column headers from Align Sample with the 'sampleID' information stored in the FileList from FileListManager. 

The 'sampleID' variable corresponds with the 2nd column of the .csv file input to FileListManager. This column of labels is intended to represent either experimental factor information e.g. control, treatment1, etc. or information on which files are blanks - it is expected that blanks should always be included so that Blank Filter can be applied in the next step. However, some studies do not include blanks or utilise a blank filter and may wish to use the column for factor information for use in other steps.

To cater for either scenario, CreateDSO duplicates the information into two 'classlist' variables. One of these is called 'blank_flag' and the other is called 'classes'. In the case of 'blank_flag', any sampleID string that contains the substring 'blank' will have the class label entered as 'blank'- this column is then used by BlankFilter when called. The 'classes' variable simply stores the original sampleID string, preserving the original information.

If the user wishes to utilise BlankFilter and other experimental classes (to be expected), they should supply the list containing 'blank' information to FileListManager in the .csv file for that tool and then use the tool 'Add Classlist' (found in our PLS Toolbox suite) to add further class information to the PLS Dataset Object created by this tool. 
  
  </help>

</tool>
