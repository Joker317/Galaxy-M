<tool id="pls_toolbox_set_include" name="Set Include" version="1.0.0">
  <description>Alter the samples or variables that are included in analyses</description>

  <command>
#set $tool_directory = $getVar('__tool_directory__', '../../../../tools/DataSetObject')
#if str($executable.value) == "true"
	sh $tool_directory/run_SetInclude.sh /usr/local/MATLAB/MATLAB_Compiler_Runtime/v81 '${pls_dso}' $dim '${include_file}'
 '${output}' > '${output_log}'

#else
	matlab -logfile ${output_log} -nosplash -r "cd('$tool_directory'); SetInclude('${pls_dso}', $dim, '${include_file}', '${output}'); exit;"
#end if
  </command>


  <inputs>
	<param format="xml" name="pls_dso" type="data" label="PLS dataset object (.xml)" />

	<param name="dim" type="select" label="Dimension to set">
		<option value="1"> sample </option>
		<option value="2"> variable </option>
	</param>
	<param format="csv" name="include_file" type="data" label="CSV file containing a 1 or 0 for every sample/variable. 1=include, 0=exclude" />
	<param name="executable" type="hidden" value="true" />
  </inputs>


  <outputs>
    	<data format="xml" name="output" label="Set Include on pls_dso.hid: PLS DSO.xml" />
	<data format="txt" name = "output_log" label="Set include on pls_dso.hid: log" />
  </outputs>


  <help>
This tool allows the user to interact with the 'include' flag of a PLS Toolbox dataset object. 

The flag is a simple boolean indicator for each sample or for each variable. The input should be a .csv file of 1s and 0s. 

It is imperative that the number of entries in the .csv file is the same as the number of samples or variables (depending on what is chosen). If this is not the case, then the original dataset object will be returned to the output and an error message will be returned in the text output. 
  </help>

</tool>
