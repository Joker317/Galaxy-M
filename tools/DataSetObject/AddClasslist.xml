<tool id="pls_toolbox_add_classlist" name="Add Class list" version="1.0.0">
	<description>Add a new classlist to a dataset object</description>
	
	<command>
#set $tool_directory = $getVar('__tool_directory__', '../../../../tools/DataSetObject')
#if str($executable.value) == "true"
	sh $tool_directory/bin/run_AddClasslist.sh /usr/local/MATLAB/MATLAB_Compiler_Runtime/v83 '${pls_dso}' '${listname}',  '${include_file}', '${output}' > '${output_log}'

#else
	matlab -logfile ${output_log} -nosplash -r "cd('$tool_directory/source'); AddClasslist('${pls_dso}', '${listname}', '${include_file}', '${output}'); exit;"
#end if
	</command>


	<inputs>
		<param format="xml" name="pls_dso" type="data" label="PLS dataset object (.xml)" />
		<param name="listname" type="text" size="15" value="new_classlist" label="Name your class list" />
		<param format="csv" name="include_file" type="data" label="CSV file containing a class label for each sample e.g. sample, QC, QC, sample ..." />
		<param name="executable" type="hidden" value="true" />
	</inputs>


	<outputs>
		<data format="xml" name="output" label="Add Class List on pls_dso.hid: PLS DSO.xml" />
		<data format="txt" name="output_log" label="Add Class List on pls_dso.hid: log" />
	</outputs>


  <help>
This tool allows the user to add a 'classlist' to a PLS Toolbox dataset object. 

The user must set a name for this classlist - which helps to interact with this classification later.
The list itself must be a .csv file with a class label for each sample. For example, a 6 sample dataset might have a new classlist called 'treatment' where the list looks like:
low, low, high, low, high, high
 
  </help>

</tool>
